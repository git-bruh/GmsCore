/*
 * SPDX-FileCopyrightText: 2013 microG Project Team
 * SPDX-License-Identifier: Apache-2.0
 */

buildscript {
    ext.cronetVersion = '102.5005.125'
    ext.nlpVersion = '2.0-alpha10'
    ext.safeParcelVersion = '1.7.0'
    ext.wearableVersion = '0.1.1'

    ext.kotlinVersion = '1.7.10'
    ext.coroutineVersion = '1.6.4'

    ext.annotationVersion = '1.3.0'
    ext.appcompatVersion = '1.4.2'
    ext.biometricVersion = '1.1.0'
    ext.coreVersion = '1.8.0'
    ext.fragmentVersion = '1.5.1'
    ext.lifecycleVersion = '2.5.1'
    ext.loaderVersion = '1.1.0'
    ext.mediarouterVersion = '1.3.1'
    ext.multidexVersion = '2.0.1'
    ext.navigationVersion = '2.5.1'
    ext.preferenceVersion = '1.2.0'
    ext.recyclerviewVersion = '1.2.0'
    ext.webkitVersion = '1.4.0'

    ext.slf4jVersion = '1.7.36'
    ext.volleyVersion = '1.2.1'
    ext.wireVersion = '4.4.1'

    ext.androidBuildGradleVersion = '7.2.1'

    ext.androidBuildVersionTools = '33.0.0'

    ext.androidMinSdk = 14
    ext.androidTargetSdk = 29
    ext.androidCompileSdk = 31

    repositories {
        mavenCentral()
        google()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$androidBuildGradleVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "com.squareup.wire:wire-gradle-plugin:$wireVersion"
    }
}

def execResult(...args) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine args
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def ourVersionCode = (((System.currentTimeMillis() / 1000) - 1660000000) / 10).toInteger()
def ourVersionName = ext.nlpVersion
logger.lifecycle('Starting build for version {} ({})...', ourVersionName, ourVersionCode)

allprojects {
    apply plugin: 'idea'

    group = 'org.microg.gms'
    version = ourVersionName
    ext.appVersionCode = ourVersionCode
    ext.isReleaseVersion = false
}

subprojects {
    repositories {
        mavenCentral()
        google()
    }
}

